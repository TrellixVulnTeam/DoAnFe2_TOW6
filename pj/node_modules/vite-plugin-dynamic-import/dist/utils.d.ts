import type { AcornNode as AcornNode2 } from 'rollup';
export declare type AcornNode<T = any> = AcornNode2 & Record<string, T>;
import type { Resolved } from './resolve';
export declare const dynamicImportRE: RegExp;
export declare const normallyImporteeRE: RegExp;
export declare const viteIgnoreRE: RegExp;
export declare const multilineCommentsRE: RegExp;
export declare const singlelineCommentsRE: RegExp;
export declare const queryRE: RegExp;
export declare const hashRE: RegExp;
export declare const bareImportRE: RegExp;
export declare const deepImportRE: RegExp;
export declare const JS_EXTENSIONS: string[];
export declare const KNOWN_SFC_EXTENSIONS: string[];
export declare function cleanUrl(url: string): string;
export declare function hasDynamicImport(code: string): boolean;
export declare function simpleWalk(ast: AcornNode, visitors: {
    [type: string]: (node: AcornNode) => void | Promise<void>;
}): Promise<void>;
export declare class MagicString {
    str: string;
    private overwrites;
    private starts;
    private ends;
    constructor(str: string);
    append(content: string): this;
    prepend(content: string): this;
    overwrite(start: number, end: number, content: string): this;
    toString(): string;
}
export declare function tryFixGlobSlash(glob: string): string;
export declare function toDepthGlob(glob: string): string;
/**
 * e.g. `src/foo/index.js` and has alias(@)
 *
 * ```
 * const maps = {
 *   './foo/index.js': [
 *     '@/foo',
 *     '@/foo/index',
 *     '@/foo/index.js',
 *   ],
 * }
 * ```
 */
export declare function mappingPath(paths: string[], resolved?: Resolved): Record<string, string[]>;
