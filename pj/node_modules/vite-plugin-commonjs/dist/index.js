"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const analyze_1 = require("./analyze");
const generate_import_1 = require("./generate-import");
const generate_export_1 = require("./generate-export");
const utils_1 = require("./utils");
const dynamic_require_1 = require("./dynamic-require");
function commonjs(options = {}) {
    let config;
    const extensions = utils_1.JS_EXTENSIONS
        .concat(utils_1.KNOWN_SFC_EXTENSIONS)
        .concat(utils_1.KNOWN_ASSET_TYPES)
        .concat(utils_1.KNOWN_CSS_TYPES);
    let dynaimcRequire;
    return {
        apply: 'serve',
        name: 'vite-plugin-commonjs',
        configResolved(_config) {
            var _a;
            config = _config;
            options.extensions = [...new Set((((_a = config.resolve) === null || _a === void 0 ? void 0 : _a.extensions) || extensions).concat(options.extensions || []))];
            dynaimcRequire = new dynamic_require_1.DynaimcRequire(_config, options);
        },
        async transform(code, id) {
            var _a;
            const pureId = (0, utils_1.cleanUrl)(id);
            const extensions = utils_1.JS_EXTENSIONS.concat(utils_1.KNOWN_SFC_EXTENSIONS);
            const { ext } = path_1.default.parse(pureId);
            if (/node_modules\/(?!\.vite\/)/.test(pureId))
                return;
            if (!extensions.includes(ext))
                return;
            if (!(0, utils_1.isCommonjs)(code))
                return;
            if (((_a = options.filter) === null || _a === void 0 ? void 0 : _a.call(options, pureId)) === false)
                return;
            const ast = this.parse(code);
            const analyzed = (0, analyze_1.analyzer)(ast, code, id);
            const imports = (0, generate_import_1.generateImport)(analyzed);
            const exportRuntime = id.includes('node_modules/.vite')
                // Bypass Pre-build
                ? null
                : (0, generate_export_1.generateExport)(analyzed);
            const dynamics = await dynaimcRequire.generateRuntime(analyzed);
            const promotionImports = [];
            const ms = new utils_1.MagicString(code);
            // require
            for (const impt of imports) {
                const { node, importee: imptee, declaration, importName, topScopeNode, } = impt;
                const importee = imptee + ';';
                let importStatement;
                if (topScopeNode) {
                    if (topScopeNode.type === analyze_1.TopScopeType.ExpressionStatement) {
                        importStatement = importee;
                    }
                    else if (topScopeNode.type === analyze_1.TopScopeType.VariableDeclaration) {
                        importStatement = declaration ? `${importee} ${declaration};` : importee;
                    }
                }
                else {
                    // TODO: Merge duplicated require id
                    promotionImports.push(importee);
                    importStatement = importName;
                }
                if (importStatement) {
                    const start = topScopeNode ? topScopeNode.start : node.start;
                    const end = topScopeNode ? topScopeNode.end : node.end;
                    ms.overwrite(start, end, importStatement);
                }
            }
            if (promotionImports.length) {
                ms.prepend(['/* import-promotion-S */', ...promotionImports, '/* import-promotion-E */'].join(' '));
            }
            // exports
            if (exportRuntime) {
                const polyfill = [
                    '/* export-runtime-S */',
                    exportRuntime.polyfill,
                    '/* export-runtime-E */',
                ].join(' ');
                const _exports = [
                    '/* export-statement-S */',
                    exportRuntime.exportDeclaration,
                    '/* export-statement-E */',
                ].filter(Boolean)
                    .join('\n');
                ms.prepend(polyfill).append(_exports);
            }
            // dynamic require
            if (dynamics) {
                const requires = [];
                const runtimes = [];
                let count = 0;
                for (const dynamic of dynamics) {
                    const { node, normally, dynaimc: dymc } = dynamic;
                    if (normally) {
                        const name = `__require2import__${count++}__`;
                        requires.push(`import * as ${name} from "${normally}";`);
                        ms.overwrite(node.callee.start, node.callee.end, name);
                    }
                    else if (dymc) {
                        requires.push(...dymc.importee.map(impt => impt + ';'));
                        runtimes.push(dymc.runtimeFn);
                        ms.overwrite(node.callee.start, node.callee.end, dymc.runtimeFn);
                    }
                }
                if (requires.length) {
                    ms.prepend(['/* import-require2import-S */', ...requires, '/* import-require2import-E */'].join(' '));
                }
                if (runtimes.length) {
                    ms.append(runtimes.join('\n'));
                }
            }
            const _code = ms.toString();
            return _code === code ? null : _code;
        }
    };
}
exports.default = commonjs;
