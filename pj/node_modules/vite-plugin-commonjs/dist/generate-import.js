"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateImport = void 0;
const analyze_1 = require("./analyze");
function generateImport(analyzed) {
    const imports = [];
    let count = 0;
    for (const req of analyzed.require) {
        const { node, ancestors, topScopeNode, dynamic, } = req;
        // â‘¢(ðŸš§)
        // Processed in dynamic-require.ts
        if (dynamic === 'dynamic')
            continue;
        const impt = { node, topScopeNode };
        const importName = `__CJS__import__${count++}__`;
        const requireIdNode = node.arguments[0];
        let requireId;
        if (!requireIdNode)
            continue; // Not value - require()
        if (requireIdNode.type === 'Literal') {
            requireId = requireIdNode.value;
        }
        else if (dynamic === 'Literal') {
            requireId = requireIdNode.quasis[0].value.raw;
        }
        if (!requireId) {
            const codeSnippets = analyzed.code.slice(node.start, node.end);
            throw new Error(`The following require statement cannot be converted.
      -> ${codeSnippets}
         ${'^'.repeat(codeSnippets.length)}`);
        }
        if (topScopeNode) {
            // â‘ (ðŸŽ¯)
            switch (topScopeNode.type) {
                case analyze_1.TopScopeType.ExpressionStatement:
                    // TODO: With members
                    impt.importee = `import '${requireId}'`;
                    break;
                case analyze_1.TopScopeType.VariableDeclaration:
                    // TODO: Multiple declaration
                    const VariableDeclarator = topScopeNode.declarations[0];
                    const { /* L-V */ id, /* R-V */ init } = VariableDeclarator;
                    // Left value
                    let LV;
                    if (id.type === 'Identifier') {
                        LV = id.name;
                    }
                    else if (id.type === 'ObjectPattern') {
                        LV = [];
                        for (const { key, value } of id.properties) {
                            LV.push({ key: key.name, value: value.name });
                        }
                    }
                    else {
                        throw new Error(`Unknown VariableDeclarator.id.type(L-V): ${id.type}`);
                    }
                    const LV_str = (spe) => typeof LV === 'object'
                        ? LV.map(e => e.key === e.value ? e.key : `${e.key} ${spe} ${e.value}`).join(', ')
                        : '';
                    // Right value
                    if (init.type === 'CallExpression') {
                        if (typeof LV === 'string') {
                            // const acorn = require('acorn')
                            impt.importee = `import * as ${LV} from '${requireId}'`;
                        }
                        else {
                            // const { parse } = require('acorn')
                            impt.importee = `import { ${LV_str('as')} } from '${requireId}'`;
                        }
                    }
                    else if (init.type === 'MemberExpression') {
                        const onlyOneMember = ancestors.find(an => an.type === 'MemberExpression').property.name;
                        const importDefault = onlyOneMember === 'default';
                        if (typeof LV === 'string') {
                            if (importDefault) {
                                // const foo = require('foo').default
                                impt.importee = `import ${LV} from '${requireId}'`;
                            }
                            else {
                                impt.importee = onlyOneMember === LV
                                    // const bar = require('foo').bar
                                    ? `import { ${LV} } from '${requireId}'`
                                    // const barAlias = require('foo').bar
                                    : `import { ${onlyOneMember} as ${LV} } from '${requireId}'`;
                            }
                        }
                        else {
                            if (importDefault) {
                                // const { member1, member2 } = require('foo').default
                                impt.importee = `import ${importName} from '${requireId}'`;
                            }
                            else {
                                // const { member1, member2 } = require('foo').bar
                                impt.importee = `import { ${onlyOneMember} as ${importName} } from '${requireId}'`;
                            }
                            impt.declaration = `const { ${LV_str(':')} } = ${importName}`;
                        }
                    }
                    else {
                        throw new Error(`Unknown VariableDeclarator.init.type(R-V): ${id.init}`);
                    }
                    break;
                default:
                    throw new Error(`Unknown TopScopeType: ${topScopeNode}`);
            }
        }
        else {
            // â‘¡(ðŸš§)
            // This is probably less accurate but is much cheaper than a full AST parse.
            impt.importee = `import * as ${importName} from '${requireId}'`;
            impt.importName = importName;
        }
        imports.push(impt);
    }
    return imports;
}
exports.generateImport = generateImport;
